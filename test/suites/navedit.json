{ "suite": "Nav edit API",
  "handler": "nav",
  "it": "should {should}",
  "options": {
    "normalize": {
      "gametree": "gametree",
      "node": "node",
      "board": "board"
    }
  },
  "merge": {
    "context": "nav",
    "nav": [ 0 ],
    "board": true
  },
  "cases": [
    { "group": "#_addNode",
      "merge": {
        "method": "_addNode",
        "arguments": [ true ]
      },
      "options": {
        "normalize": {
          "return": "nodeinfo"
        }
      }
    },

    { "should": "add a node after the last node",
      "sgf": "(;;)",
      "updateBefore": [1],
      "return": {
        "path": [2],
        "node": {}
      },
      "path": [2],
      "node": {},
      "gametree": {
        "nodes": [ {}, {}, {} ]
      }
    },
    { "should": "create variations of the last node",
      "sgf": "(;;;C[])",
      "updateBefore": [1],
      "return": {
        "path": [1, 0],
        "node": {}
      },
      "path": [1, 0],
      "node": {},
      "gametree": {
        "nodes": [ {}, {} ],
        "variations": [ {
          "nodes": [ { "C": "" } ]
        }, {
          "nodes": [ {} ]
        } ]
      }
    },
    { "should": "add a variation after the node",
      "sgf": "(;;(;C[a])(;C[b]))",
      "updateBefore": [1],
      "return": {
        "path": [2, 0],
        "node": {}
      },
      "path": [2, 0],
      "node": {},
      "gametree": {
        "nodes": [ {}, {} ],
        "variations": [ {
          "nodes": [ { "C": "a" } ]
        }, {
          "nodes": [ { "C": "b" } ]
        }, {
          "nodes": [ {} ]
        } ]
      }
    },


    { "group": "#cut",
      "merge": {
        "method": "cut"
      },
      "options": {
        "normalize": {
          "return": "gametree"
        }
      }
    },

    { "should": "cut from a node",
      "sgf": "(;;;(;)(;))",
      "updateBefore": [1],
      "return": {
        "nodes": [ {}, {} ],
        "variations": [
          { "nodes": [ {} ] },
          { "nodes": [ {} ] }
        ]
      },
      "path": [0],
      "gametree": {
        "nodes": [ {} ]
      }
    },
    { "should": "cut a variation",
      "sgf": "(;;(;)(;)(;))",
      "updateBefore": [0, 0],
      "return": {
        "nodes": [ {} ]
      },
      "path": [1],
      "gametree": {
        "nodes": [ {}, {} ],
        "variations": [
          { "nodes": [ {} ] },
          { "nodes": [ {} ] }
        ]
      }
    },
    { "should": "cut a variation and merge remaining one",
      "sgf": "(;;(;)(;(;)(;)))",
      "updateBefore": [0, 0],
      "return": {
        "nodes": [ {} ]
      },
      "path": [1],
      "gametree": {
        "nodes": [ {}, {}, {} ],
        "variations": [
          { "nodes": [ {} ] },
          { "nodes": [ {} ] }
        ]
      }
    },

    { "group": "#insert",
      "merge": {
        "method": "insert"
      },
      "options": {
        "normalize": {
          "arguments": [ "gametree" ]
        }
      }
    },

    { "should": "insert a gametree after a leaf node",
      "sgf": "(;C[a];C[b])",
      "arguments": [ {
        "nodes": [ {"C":"i"} ],
        "variations": [
          { "nodes": [ {} ] },
          { "nodes": [ {} ] }
        ]
      } ],
      "updateBefore": [1],
      "return": [2],
      "gametree": {
        "nodes": [ {"C":"a"}, {"C":"b"}, {"C":"i"} ],
        "variations": [
          { "nodes": [ {} ] },
          { "nodes": [ {} ] }
        ]
      }
    },
    { "should": "insert a gametree as a variation after a non-leaf node",
      "sgf": "(;C[a];C[b];C[c](;C[d])(;C[e]))",
      "arguments": [ {
        "nodes": [ {"C":"i"} ],
        "variations": [
          { "nodes": [ {} ] },
          { "nodes": [ {} ] }
        ]
      } ],
      "updateBefore": [1],
      "return": [1, 0],
      "gametree": {
        "nodes": [ {"C":"a"}, {"C":"b"} ],
        "variations": [
          { "nodes": [ {"C":"c"} ],
            "variations": [
              { "nodes": [ {"C":"d"} ] },
              { "nodes": [ {"C":"e"} ] }
            ]
          },
          { "nodes": [ {"C":"i"} ],
            "variations": [
              { "nodes": [ {} ] },
              { "nodes": [ {} ] }
            ]
          }
        ]
      }
    },
    { "should": "insert a gametree as a new variation of existing ones",
      "sgf": "(;C[a];C[b](;C[c])(;C[d]))",
      "arguments": [ {
        "nodes": [ {"C":"i"} ],
        "variations": [
          { "nodes": [ {} ] },
          { "nodes": [ {} ] }
        ]
      } ],
      "updateBefore": [1],
      "return": [2, 0],
      "gametree": {
        "nodes": [ {"C":"a"}, {"C":"b"} ],
        "variations": [
          { "nodes": [ {"C":"c"} ] },
          { "nodes": [ {"C":"d"} ] },
          { "nodes": [ {"C":"i"} ],
            "variations": [
              { "nodes": [ {} ] },
              { "nodes": [ {} ] }
            ]
          }
        ]
      }
    },

    { "group": "#nodeType",
      "merge": {
        "method": "nodeType",
        "sgf": "(;SZ[5];B[aa];AW[ab:cb])"
      }
    },

    { "should": "get node type 'root'",
      "arguments": [ [ 0 ] ],
      "return": "root"
    },
    { "should": "get node type 'move'",
      "arguments": [ [ 1 ] ],
      "return": "move"
    },
    { "should": "get node type 'setup'",
      "arguments": [ [ 2 ] ],
      "return": "setup"
    },

    { "group": "#play",
      "merge": {
        "method": "play"
      },
      "options": {
        "normalize": {
          "arguments": [ "value" ]
        }
      }
    },

    { "should": "play a black stone",
      "sgf": "(;SZ[3])",
      "arguments": [ { "x": 0, "y": 0 } ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ] },
          { "B": { "x": 0, "y": 0 } }
        ]
      },
      "board": [
        { "color": 1, "mark": { "last": true } },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "play a white stone",
      "sgf": "(;SZ[3];B[ab])",
      "updateBefore": [ 1 ],
      "arguments": [ { "x": 0, "y": 0 } ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ] },
          { "B": { "x": 0, "y": 1 } },
          { "W": { "x": 0, "y": 0 } }
        ]
      },
      "board": [
        { "color": 2, "mark": { "last": true } },
        { "color": 0 },
        { "color": 0 },

        { "color": 1 },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "play black stone with capture",
      "sgf": "(;SZ[3]AW[aa][ca][bb]AB[ab])",
      "arguments": [ { "x": 1, "y": 0 } ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ],
            "AW": [
              { "x": 0, "y": 0 },
              { "x": 2, "y": 0 },
              { "x": 1, "y": 1 }
            ],
            "AB": [ { "x": 0, "y": 1 } ]
          },
          { "B": { "x": 1, "y": 0 } }
        ]
      },
      "board": [
        { "color": 0 },
        { "color": 1, "mark": { "last": true } },
        { "color": 2 },

        { "color": 1 },
        { "color": 2 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "prevent illegal move from being played",
      "sgf": "(;SZ[3]AW[ba][ab])",
      "arguments": [ { "x": 0, "y": 0 } ],
      "return": false,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ],
            "AW": [
              { "x": 1, "y": 0 },
              { "x": 0, "y": 1 }
            ]
          }
        ]
      },
      "board": [
        { "color": 0 },
        { "color": 2 },
        { "color": 0 },

        { "color": 2 },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },

    { "group": "#stones",
      "merge": {
        "method": "stones"
      },
      "options": {
        "normalize": {
          "arguments": [ null, "value" ]
        }
      }
    },

    { "should": "setup black stones on root node",
      "sgf": "(;SZ[3])",
      "arguments": [
        1,
        [
          { "x": 0, "y": 0 },
          { "x": 1, "y": 1 }
        ]
      ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ],
            "AB": [
              { "x": 0, "y": 0 },
              { "x": 1, "y": 1 }
            ]
          }
        ]
      },
      "board": [
        { "color": 1 },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 1 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "setup white stones on root node",
      "sgf": "(;SZ[3])",
      "arguments": [
        2,
        [
          { "x": 0, "y": 0 },
          { "x": 1, "y": 1 }
        ]
      ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ],
            "AW": [
              { "x": 0, "y": 0 },
              { "x": 1, "y": 1 }
            ]
          }
        ]
      },
      "board": [
        { "color": 2 },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 2 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "toggle existing stones on root node",
      "sgf": "(;SZ[3]AB[aa:ca])",
      "arguments": [
        1,
        [
          { "x": 0, "y": 0 },
          { "x": 1, "y": 1 }
        ]
      ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ],
            "AB": [
              { "x": 1, "y": 0 },
              { "x": 2, "y": 0 },
              { "x": 1, "y": 1 }
            ]
          }
        ]
      },
      "board": [
        { "color": 0 },
        { "color": 1 },
        { "color": 1 },

        { "color": 0 },
        { "color": 1 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "update stones on a new setup node",
      "sgf": "(;SZ[3];B[aa];W[ba])",
      "updateBefore": [ 2 ],
      "arguments": [
        1,
        [
          { "x": 0, "y": 0 },
          { "x": 1, "y": 1 }
        ]
      ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ] },
          { "B": { "x": 0, "y": 0 } },
          { "W": { "x": 1, "y": 0 } },
          { "AE": [ { "x": 0, "y": 0 } ],
            "AB": [ { "x": 1, "y": 1 } ]
          }
        ]
      },
      "board": [
        { "color": 0 },
        { "color": 2 },
        { "color": 0 },

        { "color": 0 },
        { "color": 1 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "force override of existing stones",
      "sgf": "(;SZ[3];B[aa];W[ba];AW[ca])",
      "updateBefore": [ 3 ],
      "arguments": [
        1,
        [
          { "x": 1, "y": 0 },
          { "x": 2, "y": 0 }
        ],
        true
      ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ] },
          { "B": { "x": 0, "y": 0 } },
          { "W": { "x": 1, "y": 0 } },
          { "AB": [
            { "x": 1, "y": 0 },
            { "x": 2, "y": 0 } ]
          }
        ]
      },
      "board": [
        { "color": 1 },
        { "color": 1 },
        { "color": 1 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "reverse stone removal without setting stone again",
      "sgf": "(;SZ[3];B[aa];W[ba];AE[aa])",
      "updateBefore": [ 3 ],
      "arguments": [
        1,
        [
          { "x": 0, "y": 0 }
        ]
      ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ] },
          { "B": { "x": 0, "y": 0 } },
          { "W": { "x": 1, "y": 0 } },
          { }
        ]
      },
      "board": [
        { "color": 1 },
        { "color": 2 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "reverse stone color without setting stone (AW)",
      "sgf": "(;SZ[3];B[aa];W[ba];AW[aa])",
      "updateBefore": [ 3 ],
      "arguments": [
        1,
        [
          { "x": 0, "y": 0 }
        ]
      ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ] },
          { "B": { "x": 0, "y": 0 } },
          { "W": { "x": 1, "y": 0 } },
          { }
        ]
      },
      "board": [
        { "color": 1 },
        { "color": 2 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "reverse stone color without setting stone (AB)",
      "sgf": "(;SZ[3];B[aa];W[ba];AB[ba])",
      "updateBefore": [ 3 ],
      "arguments": [
        2,
        [
          { "x": 1, "y": 0 }
        ]
      ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ] },
          { "B": { "x": 0, "y": 0 } },
          { "W": { "x": 1, "y": 0 } },
          { }
        ]
      },
      "board": [
        { "color": 1 },
        { "color": 2 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },

    { "group": "#marks",
      "merge": {
        "method": "marks"
      },
      "options": {
        "normalize": {
          "arguments": [ null, "value" ]
        }
      }
    },

    { "should": "Set circle mark on root node",
      "sgf": "(;SZ[3])",
      "arguments": [
        "circle",
        [
          { "x": 0, "y": 1 }
        ]
      ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ],
            "CR": [
              { "x": 0, "y": 1 }
            ]
          }
        ]
      },
      "board": [
        { "color": 0 },
        { "color": 0 },
        { "color": 0 },

        { "color": 0, "mark": { "type": "circle" } },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "Toggle circle marks",
      "sgf": "(;SZ[3]CR[aa])",
      "arguments": [
        "circle",
        [
          { "x": 0, "y": 0 },
          { "x": 0, "y": 1 }
        ]
      ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ],
            "CR": [
              { "x": 0, "y": 1 }
            ]
          }
        ]
      },
      "board": [
        { "color": 0 },
        { "color": 0 },
        { "color": 0 },

        { "color": 0, "mark": { "type": "circle" } },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "Replace non-circle marks with circles",
      "sgf": "(;SZ[3]SQ[aa])",
      "arguments": [
        "circle",
        [
          { "x": 0, "y": 0 },
          { "x": 0, "y": 1 }
        ]
      ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ],
            "CR": [
              { "x": 0, "y": 0 },
              { "x": 0, "y": 1 }
            ]
          }
        ]
      },
      "board": [
        { "color": 0, "mark": { "type": "circle" } },
        { "color": 0 },
        { "color": 0 },

        { "color": 0, "mark": { "type": "circle" } },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "Set, toggle or replace marks",
      "sgf": "(;SZ[3]CR[ba]MA[ca]SL[ab]SQ[bb]TR[cb])",
      "arguments": [
        "circle",
        [
          { "x": 0, "y": 0 },
          { "x": 1, "y": 0 },
          { "x": 2, "y": 0 },
          { "x": 0, "y": 1 },
          { "x": 1, "y": 1 },
          { "x": 2, "y": 1 }
        ]
      ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ],
            "CR": [
              { "x": 0, "y": 0 },
              { "x": 2, "y": 0 },
              { "x": 0, "y": 1 },
              { "x": 1, "y": 1 },
              { "x": 2, "y": 1 }
            ]
          }
        ]
      },
      "board": [
        { "color": 0, "mark": { "type": "circle" } },
        { "color": 0 },
        { "color": 0, "mark": { "type": "circle" } },

        { "color": 0, "mark": { "type": "circle" } },
        { "color": 0, "mark": { "type": "circle" } },
        { "color": 0, "mark": { "type": "circle" } },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "Set or toggle dimmed status (preserve other marks)",
      "sgf": "(;SZ[3]LB[ba:A]CR[ca]DD[ab])",
      "arguments": [
        "dimmed",
        [
          { "x": 0, "y": 0 },
          { "x": 1, "y": 0 },
          { "x": 2, "y": 0 },
          { "x": 0, "y": 1 }
        ]
      ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ],
            "CR": [ { "x": 2, "y": 0 } ],
            "DD": [
              { "x": 0, "y": 0 },
              { "x": 1, "y": 0 },
              { "x": 2, "y": 0 }
            ],
            "LB": [
              { "first": { "x": 1, "y": 0 }, "second": "A" }
            ]
          }
        ]
      },
      "board": [
        { "color": 0, "mark": { "dimmed": true } },
        { "color": 0, "mark": { "label": "A", "dimmed": true } },
        { "color": 0, "mark": { "type": "circle", "dimmed": true } },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "Set or replace labels (preserve other marks)",
      "sgf": "(;SZ[3]LB[ba:A]CR[ca]DD[ab])",
      "arguments": [
        "label",
        [
          { "first": { "x": 0, "y": 0 }, "second": "X" },
          { "first": { "x": 1, "y": 0 }, "second": "Y" },
          { "first": { "x": 2, "y": 0 }, "second": "Z" },
          { "first": { "x": 0, "y": 1 }, "second": "T" }
        ]
      ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ],
            "CR": [ { "x": 2, "y": 0 } ],
            "DD": [ { "x": 0, "y": 1 } ],
            "LB": [
              { "first": { "x": 0, "y": 0 }, "second": "X" },
              { "first": { "x": 1, "y": 0 }, "second": "Y" },
              { "first": { "x": 2, "y": 0 }, "second": "Z" },
              { "first": { "x": 0, "y": 1 }, "second": "T" }
            ]
          }
        ]
      },
      "board": [
        { "color": 0, "mark": { "label": "X" } },
        { "color": 0, "mark": { "label": "Y" } },
        { "color": 0, "mark": { "type": "circle", "label": "Z" } },

        { "color": 0, "mark": { "dimmed": true, "label": "T" } },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },
    { "should": "Clear all marks",
      "sgf": "(;SZ[3]LB[cc:A]DD[ac]CR[ba]MA[ca]SL[ab]SQ[bb]TR[cb])",
      "arguments": [ null ],
      "return": true,
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ] }
        ]
      },
      "board": [
        { "color": 0 },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 },

        { "color": 0 },
        { "color": 0 },
        { "color": 0 }
      ]
    },

    { "group": "#infos",
      "merge": {
        "method": "infos"
      }
    },
    { "should": "Set a single info property",
      "sgf": "(;SZ[3])",
      "arguments": [ "gamecomment", "Foo" ],
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ],
            "GC": "Foo"
          }
        ]
      }
    },
    { "should": "Delete a single info property",
      "sgf": "(;SZ[3]GC[Foo])",
      "arguments": [ "gamecomment" ],
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ] }
        ]
      }
    },
    { "should": "Set multiple properties at once",
      "sgf": "(;SZ[3])",
      "arguments": [ {
        "gamecomment": "Foo",
        "annotator": "Bar"
      } ],
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ],
            "GC": "Foo",
            "AN": "Bar"
          }
        ]
      }
    },
    { "should": "Delete multiple properties",
      "sgf": "(;SZ[3];GC[Foo]AN[Bar])",
      "updateBefore": [ 1 ],
      "arguments": [ {
        "gamecomment": null,
        "nodecomment": null
      } ],
      "gametree": {
        "nodes": [
          { "SZ": [ 3, 3 ] },
          { "AN": "Bar" }
        ]
      }
    }
  ]
}
